pipeline {
    agent any

    tools {
        jdk 'Java 17'
        gradle 'gradle'
    }

    environment {
        SCM_URL = "https://github.com/Danielsanchez96/Portafolio-QA-.git"
        SCM_BRANCH = "main"
        NOMBRE_PROYECTO_GIT = "base-project-qa"
        RECIBE = "danielisaacsanchezsepulveda1@gmail.com"
    }

    parameters {
        string(name: 'TEST_RUNNER', defaultValue: '', description: 'Nombre del test a ejecutar (opcional)')
    }

    stages {
        stage('Clonar proyecto') {
            steps {
                bat 'git config --global --replace-all http.sslVerify false'
                git url: "${SCM_URL}", branch: "${SCM_BRANCH}"
            }
        }

        stage('Ejecutar pruebas') {
            steps {
                script {
                    if (params.TEST_RUNNER?.trim()) {
                        echo "Ejecutando test espec√≠fico: ${params.TEST_RUNNER}"
                        bat "gradlew.bat clean test --tests ${params.TEST_RUNNER} aggregate"
                    } else {
                        bat "gradlew.bat clean test aggregate"
                    }
                }
            }
        }

        stage('Publicar reporte Serenity') {
            steps {
                publishHTML([
                    reportDir: 'target\\site\\serenity',
                    reportFiles: 'index.html',
                    reportName: 'Reporte Serenity',
                    keepAll: true,
                    allowMissing: true,
                    alwaysLinkToLastBuild: true
                ])
            }
        }

        stage('Notificar Resultado') {
            steps {
                script {
                    def fecha = new Date().format("dd/MM/yyyy HH:mm:ss")
                    def mensaje = "Resultado de pruebas (${NOMBRE_PROYECTO_GIT}) - ${fecha}: ${currentBuild.result ?: 'SUCCESS'}"
                    emailext(
                        subject: "Resultado Jenkins - ${currentBuild.result ?: 'SUCCESS'}",
                        body: mensaje,
                        to: "${RECIBE}"
                    )
                }
            }
        }
    }

    post {
        always {
            echo 'üìå Pipeline finalizado.'
        }
        success {
            echo '‚úÖ La ejecuci√≥n fue exitosa.'
        }
        failure {
            echo '‚ùå La ejecuci√≥n fall√≥.'
        }
    }
}
