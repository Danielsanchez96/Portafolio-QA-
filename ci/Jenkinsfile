pipeline {
    agent { label params.AGENTE_EJECUCION }

    // Forzar uso de cmd.exe (Windows)
    options {
        shell('cmd')
    }

    environment {
        SCM_URL = "https://github.com/Danielsanchez96/Portafolio-QA-.git"
        SCM_BRANCH = "main"
        NOMBRE_PROYECTO_GIT = "base-project-qa"
        RECIBE = "tucorreo@dominio.com"
    }

    parameters {
        string(name: 'AGENTE_EJECUCION', defaultValue: '', description: 'Agente para ejecutar pruebas')
        string(name: 'TEST_RUNNER', defaultValue: '', description: 'Nombre del test a ejecutar (opcional)')
    }

    stages {
        stage('Verificar shell') {
            steps {
                bat 'echo Ejecutando con cmd.exe'
            }
        }

        stage('Obtener código') {
            steps {
                bat 'git config --global --replace-all http.sslVerify false'
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${SCM_BRANCH}"]],
                    userRemoteConfigs: [[url: "${SCM_URL}"]]
                ])
            }
        }

        stage('Ejecutar pruebas') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Repositorio-Maven', usernameVariable: 'MAVEN_USER', passwordVariable: 'MAVEN_PASSWORD')]) {
                    script {
                        bat 'gradlew.bat clean'

                        if (params.TEST_RUNNER?.trim()) {
                            echo "Ejecutando test específico: ${params.TEST_RUNNER}"
                            bat "gradlew.bat test --tests ${params.TEST_RUNNER} --info"
                        } else {
                            bat "gradlew.bat clean test aggregate"
                        }
                    }
                }
            }
        }

        stage('Publicar Evidencia') {
            steps {
                publishHTML([
                    reportDir: 'target\\site\\serenity',
                    reportFiles: 'index.html',
                    reportName: 'Evidencias de Prueba',
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true
                ])
            }
        }

        stage('Notificar Resultado') {
            steps {
                script {
                    def fecha = new Date().format("dd/MM/yyyy HH:mm:ss")
                    def mensaje = "Resultado de pruebas (${NOMBRE_PROYECTO_GIT}) - ${fecha}: ${currentBuild.result ?: 'SUCCESS'}"
                    emailext(
                        subject: "Resultado Jenkins - ${currentBuild.result ?: 'SUCCESS'}",
                        body: mensaje,
                        to: "${RECIBE}"
                    )
                }
            }
        }
    }

    post {
        failure {
            echo 'La ejecución falló.'
        }
        success {
            echo 'La ejecución fue exitosa.'
        }
    }
}
